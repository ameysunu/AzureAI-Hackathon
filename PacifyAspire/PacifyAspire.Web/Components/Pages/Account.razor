@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

@page "/account"

<PageTitle>Account</PageTitle>


<div class="main-page">
    <Navbar />
    <div>
        <AuthorizeView>
            <Authorized>
                <div style="display: flex; height: 100vh;">
                    <div style="flex: 1; padding: 20px;">
                        <p class="welcome-text">
                            My Account
                        </p>

                        @if (details == null)
                        {
                            <p>Loading account details...</p>
                        }
                        else
                        {
                            <div class="account-container">
                                <h3>Welcome, @details.UserName</h3>

                                <h4>Actions</h4>
                                <button class="reset-btn" @onclick="ResetStats" disabled="@isResetting">Reset Mood Stats</button>
                                <button class="logout-btn" @onclick="Logout">Logout</button>
                            </div>
                        }

                        <style>
                            .main-page {
                            font-family: "Atkinson Hyperlegible Next", serif;
                            font-optical-sizing: auto;
                            font-style: normal;
                            padding-top: 5%;
                            padding-left: 2%;
                            flex-direction: column;
                            align-items: flex-start;
                            }

                            .welcome-text {
                            color: #009995;
                            font-size: 50px;
                            }

                            .account-container {
                                max-width: 400px;
                                background: #fff;
                                padding: 20px;
                                border-radius: 8px;
                                box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
                            }

                            .reset-btn, .logout-btn {
                                margin-top: 10px;
                                padding: 10px 15px;
                                border: none;
                                border-radius: 5px;
                                cursor: pointer;
                                transition: 0.2s;
                                font-size: 0.9rem;
                            }

                            .reset-btn {
                                background: #ff4d4d;
                                color: white;
                            }

                            .logout-btn {
                                background: #007bff;
                                color: white;
                            }

                            .reset-btn:hover {
                                background: #cc0000;
                            }

                            .logout-btn:hover {
                                background: #0056b3;
                            }

                            .reset-btn:disabled {
                                background: gray;
                                cursor: not-allowed;
                            }

                        </style>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>
</div>

@code {
    UserDetails details = new UserDetails();
    AuthenticationState authState;
    private bool isResetting = false;


    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        details.UserId = authState.User.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
        details.UserName = authState.User.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname")?.Value;

    }

    private async Task ResetStats()
    {
        isResetting = true;

        //Logic to reset stats

        isResetting = false;
    }

    private async Task Logout()
    {
        Navigation.NavigateTo("MicrosoftIdentity/Account/SignOut", forceLoad: true);
    }


    private class UserDetails
    {
        public string UserId { get; set; }
        public string UserName { get; set; }
    }

}
