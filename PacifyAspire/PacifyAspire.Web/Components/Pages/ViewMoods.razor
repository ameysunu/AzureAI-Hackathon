@inject ThoughtsController ThoughtsController
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

@page "/view-mood"

<div class="main-page" style="@(ThoughtsController.thoughts != null ? $"background-image: url('{ThoughtsController.thoughts.Image}'); background-size: cover; background-position: center; background-repeat: no-repeat; min-height: 100vh;" : "")">
    <Navbar />
    <div>
        <AuthorizeView>
            <Authorized>
                <div style="display: flex; height: 100vh;">
                    <div style="flex: 1; padding: 20px;">
                        <p class="welcome-text">
                            All Moods
                        </p>


                        <div class="allmoods-container">
                            <br />

                            @if (allMoodLogs.Count > 0)
                            {
                                @foreach(var mood in allMoodLogs)
                                {
                                    <p class="allmoods-item" @onclick="() => ToggleExpand(mood.Id)"> 
                                        @mood.Mood

                                        @if (expandedMoodId == mood.Id)
                                        {
                                            <br />
                                            <br />
                                            @mood.MoodDescription

                                            <br />
                                            <p>Mood Intensity:  @mood.MoodIntensity</p>

                                            <br />
                                            <br />

                                        <p> Logged at: @ConvertDateTime(mood.MoodDate)</p>



                                        }
                                    </p>
                                }

                            } 
                            else
                            {
                                <p class="allmoods-item"> No mood found.</p>
                            }

                        </div>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <NotAuthorization />
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>
@code {

    List<MoodLogs> allMoodLogs = new List<MoodLogs>();

    private bool _isFirstRender = true;
    private string expandedMoodId = String.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || !_isFirstRender) return;
        _isFirstRender = false;

        await FetchMoodLogs();
    }

    private async Task FetchMoodLogs()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var UserId = authState.User.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;

        if (string.IsNullOrEmpty(UserId))
        {
            Console.WriteLine("User ID is null or empty.");
            return;
        }

        var config = new ConfigurationBuilder()
            .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
            .AddEnvironmentVariables()
            .Build();

        var httpClient = HttpClientFactory.CreateClient();

        string apiUrl = config["isTest"] == "true"
            ? $"https://localhost:7563/getmoodbyuser?userId={UserId}"
            : $"{config["ASPIRE_WEBAPISERVICE"]}/getmoodbyuser?userId={UserId}";

        try
        {
            allMoodLogs = await httpClient.GetFromJsonAsync<List<MoodLogs>>(apiUrl);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching mood logs: {ex.Message}");
        }
    }

    private void ToggleExpand(String id)
    {
        if(expandedMoodId == id)
        {
            expandedMoodId = String.Empty;
        } else
        {
            expandedMoodId = id;
        }

        StateHasChanged();
    }

    private string ConvertDateTime(DateTime date)
    {
        return date.ToString("d-MMM-yyyy");
    }

}
