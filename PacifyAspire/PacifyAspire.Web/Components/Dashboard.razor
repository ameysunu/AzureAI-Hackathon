@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ThoughtsController ThoughtsController
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@page "/dashboard";

<div class="main-page" style="@(data != null ? $"background-image: url('{data.Image}'); background-size: cover; background-position: center; background-repeat: no-repeat; min-height: 100vh;" : "")">
    <Navbar />
    <div>
        <AuthorizeView>
            <Authorized>
                <div style="display: flex; height: 100vh;">
                    <div style="flex: 1; padding: 20px;">
                        <p class="welcome-text">
                            Hey @context.User.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname")?.Value!
                        </p>

                        @if (data != null)
                        {
                            <PositivityWidget data="data" />
                        }
                        else
                        {
                            <p>Loading...</p>
                        }

                        <h2> Mood Blogger </h2>

                        <div style="display: flex; gap: 20px;">
                            <MoodLoggerWidget />
                            <MoodViewerWidget />
                        </div>
                    </div>
                    <div style="padding: 15px">
                        <NavigationWidget />
                    </div>
                </div>

            </Authorized>
            <NotAuthorized>
                <NotAuthorization />
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>



@code 
{
    private Thoughts data;

    protected override async Task OnInitializedAsync()
    {
        var config = new ConfigurationBuilder()
    .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
    .AddEnvironmentVariables()
    .Build();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState != null && authState.User != null && authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
        {
            var httpClient = HttpClientFactory.CreateClient();

            if (config["isTest"] == "true")
            {
                data = await httpClient.GetFromJsonAsync<Thoughts>($"https://localhost:7563/thoughts");
            }
            else
            {
                data = await httpClient.GetFromJsonAsync<Thoughts>($"{config["ASPIRE_WEBAPISERVICE"]}/thoughts");
            }

            ThoughtsController.thoughts = data;
        }
    }
}
